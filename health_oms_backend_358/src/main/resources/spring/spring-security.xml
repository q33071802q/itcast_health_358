<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!--授权: -->
    <security:http auto-config="true" use-expressions="true">

        <!--配置自定义的页面-->
        <!--
            login-page: 指定登录页面
            login-processing-ur; 指定登录的请求路径
            authentication-failure-forward-url： 认证失败后跳转的路径  前缀必须  /
            authentication-success-forward-url：  认证成功后的调整的路径  前缀必须  /
        -->
        <security:form-login
                login-page="http://localhost:83/login.html"
                login-processing-url="/login.do"
                authentication-failure-forward-url="/user/doFail.do"
                authentication-success-forward-url="/user/doSuccess.do"></security:form-login>

        <!--关闭跨站请求伪造-->
        <security:csrf disabled="true"></security:csrf>

        <security:logout invalidate-session="true" logout-success-url="http://localhost:83/login.html" logout-url="/logout.do"></security:logout>

    </security:http>



    <!--认证： 提供认证信息-->
    <!--认证管理器-->
    <security:authentication-manager>
        <!--认证信息的提供者-->
        <!--user-service-ref： 关联用户服务对象，服务对象提供账号，密码和权限信息
                对象必须实现接口UserDetailsService
            -->
        <security:authentication-provider user-service-ref="userService">
            <!--关联加密工具类-->
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>


    <!--创建用户服务对象-->
    <bean id="userService" class="com.itheima.security.SecurityConfigUserService"></bean>

    <!--创建加密工具类-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>


    <!--开启注解支持-->
    <security:global-method-security pre-post-annotations="enabled"></security:global-method-security>
</beans>